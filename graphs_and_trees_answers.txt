Create a file named graphs_and_trees_answers.txt and answer these questions in it.

1. What is a binary tree and what makes it unique to other trees?
Answer:  A tree is a data structure that is similar to a hierarchal tree where each tree contains nodes consisting of a value.  Binary trees are unique because each node can have up to two child nodes: one left and one right.  This is also called leaf notes.

2. What is a heuristic?
Answer: Generally speaking heuristic is a "rule of thumb", or a good guide to follow when making decisions.  In coding it's similar but refers more to algorithms.  It's a guess that an algorithm makes to solve a complex problem sacrificing accuracy.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?
Answer: Estimating how long a project would take is an example that requires heuristics.  We would consider what we've done in the past on previous projects and apply that logic and timing to this current project and make an educated guess on how long it would take.

4. What is the difference between a depth-first search and a breadth-first search?
Answer: Depth First Search and Breadth First Search are search algorithms used for graphs and trees. In a breadth first search, you start at the root node and then scan each node in the first level starting from the leftmost node, moving towards the right.  Then you continue scanning the second level and the third and so on until you find the node you're looking for.  In a depth first search, on the other hand, you start at the root node and follow one of the branches of the tree as far as possible until either the node you are looking for is found or you hit a leaf node.  If you hit a leaf node then you continue the search at the nearest ancestor with unexplored children.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
Answer: A undirected, a-cyclic, unweighted graph means that the edge connecting two nodes are ambiguous.  There are no starts or ends at either node.  In addition, no loops are formed.  If we do a DFS of this graph it will result in a dead end.  The graph does not have assigned cost of travel between nodes.

6. What kind of graph is a binary search tree?
Answer: Depending on the data a binary search tree can be weighted or unweighted, A-cyclic, and  undirected graph

Programming Questions
For the following questions, describe in words how you could solve the problem and then do so. Use the depiction of the Binary Search Tree to refer to the examples.

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

Answer:
We know that the left child contains a value that is less than the parent value.  So we can start with the root and compare the value of the number we are looking for with the value at the root.  Then we can work our way down to the left child and if it's not there move to the right child and repeat this process until the value is found.

class Node {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

class BST {
  constructor() {
    this.root = null
  }

  add(data) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      const searchTree = function(node) {
        if (data < node.data) {
          if(node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if (node.right === null) {
            node.right = new Node(data);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  };

  isPresent(data) {
    let current = this.root;
    while (current) {
      if (data === current.data) {
        return "The value " + data + " exists in the tree";
      }
      if (data < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return "The value " + data+ " does not exist in the tree";
  };
}


const bst = new BST();
bst.add(8);
bst.add(3);
bst.add(10);
bst.add(1);
bst.add(6);
bst.add(14);
bst.add(4);
bst.add(7);
bst.add(13);
console.log(bst.isPresent(10));
console.log(bst.isPresent(2));


2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

Answer: I started this thinking that the distance between the two given nodes will, for the most part, be equal to the distance from their placement to the root node minus TWICE the distance from the root to the lowest common ancestor of node1 and node2.

class Node {
	constructor(data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class BinarySearchTree {
	constructor() {
		this.root = null;
	}

	findDistance(root, n1, n2) {
		let lowestCommonAncestor = this.findCommonAncestor(root, n1, n2);
		let distanceNode1ToRoot = this.countAncestors(lowestCommonAncestor, n1);
		let distanceNode2ToRoot = this.countAncestors(lowestCommonAncestor, n2);
		let distanceRootToAncestor = this.countAncestors(root, lowestCommonAncestor);
		let totalDistance = (distanceNode1ToRoot + distanceNode2ToRoot) - (2 * distanceRootToAncestor);
		return ('The distance between node ' + n1 + ' and node ' + n2 + ' is ' + totalDistance);
	}

	findCommonAncestor(root, n1, n2) {
		if (!root) return;
		let lowestCommonAncestor = root.data;
		if (n1 === lowestCommonAncestor || n2 === lowestCommonAncestor) {
			return lowestCommonAncestor;
		}
		if (n1 < lowestCommonAncestor && n2 < lowestCommonAncestor) {
			return this.findCommonAncestor(root.left, n1, n2);
		}
		if (n1 > lowestCommonAncestor && n2 > lowestCommonAncestor) {
			return this.findCommonAncestor(root.right, n1, n2);
		}
		return lowestCommonAncestor;
	}

	countAncestors(root, data) {
		let thisNode = this.root;
		let nodeCount = 0;
		while (thisNode) {
			if (data === thisNode.data) {
				return nodeCount;
			}
			thisNode = data < thisNode.data ? thisNode.left : thisNode.right;
			nodeCount++;
		}
	}

	getRoot() {
		return this.root;
	}

	add(data) {
		let newNode = new Node(data);
		if (this.root === null) {
			this.root = newNode;
			this.length++;
		} else {
			this.addNode(this.root, newNode);
		}
	}

	addNode(node, newNode) {
		if (newNode.data < node.data) {
			if (node.left === null) {
				node.left = newNode;
				this.length++;
			} else {
				this.addNode(node.left, newNode);
			}
		} else {
			if (node.right === null) {
				node.right = newNode;
				this.length++;
			} else {
				this.addNode(node.right, newNode);
			}
		}
	}
}

let BST = new BinarySearchTree();

BST.add(8);
BST.add(10);
BST.add(3);
BST.add(14);
BST.add(6);
BST.add(1);
BST.add(13);
BST.add(7);
BST.add(4);

let root = BST.getRoot();
console.log(BST.findDistance(root, 4, 10)); //'The distance between node 4 and node 10 is 4'
