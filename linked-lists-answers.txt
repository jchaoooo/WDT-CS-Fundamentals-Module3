Exercises
For exercises requiring code, you are free to use the language of your choice.

Give written answers for each question and put them in linked-lists-answers.txt:

1. What are some pros and cons of using linked lists instead of arrays?
Some pros to linked lists is that each node in a linked list is represented, meaning that there are never empty placeholders.  In addition since each node is independent in memory the OS can use any available memory location to store it.  The allows linked lists to easily grow to large sizes.  Cons to linked lists are that since nodes can exist anywhere in physical memory it can be inefficient to acess and element within the list.  We must access it in order from the head node.  Whereas for arrays we can easily search for an element by using it's index.

2. Come up with a real world example of a linked list.
A real world example is a train.  A train has many carriages. Each carriage is linked to the next carriage until we get to the first (head) and last one where there is no carriage.

Programming Questions
You may program the following questions in any language of your choice (JavaScript, pseudocode, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.
Answer:

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to head
   WHILE currentnode.next is not null
    SET currentNode to currentNode.next
   END WHILE
 END IF
   SET current.next to node
 }
}



2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

Answer:
function linkedList() {
  let length = 0;
  let head = null;

  let Node = function(element) {
    this.element = element;
    this.next = null;
  }

  this.add = function(element) {
    let node = new Node(element);
    if(head === null) {
      head = node;
    } else {
      let currentNode = head;
      while(currentNode.next) {
        currentNode = currentNode.next;
      }
      currentNode.next = node;
    }
    length++;
  };

  this.removeDuplicates = function() {
    let currentNode = head;
    while(currentNode != null) {
      let previousNode = currentNode;
      let nextNode = currentNode.next;
      while(nextNode != null) {
        if(currentNode.element === nextNode.element) {
          previousNode.next = nextNode.next;
          length--;
        } else {
          previousNode = nextNode;
        }
        nextNode = nextNode.next;
      }
      currentNode = currentNode.next;
    }
    return this;
  };

  this.showAllElements = function() {
    if(head === null) return;
    let currentNode = head;
    let i = 1;
    while (currentNode.next != null) {
      console.log("Position: " + i + " Value: " + currentNode.element);
      currentNode = currentNode.next;
      i++;
    }
    console.log("Position: " + i + " Value: " + currentNode.element);
  }
}

let LL = new linkedList();
LL.add("a");
LL.add("c");
LL.add("d");
LL.add("d");
LL.add("a");
LL.showAllElements();
LL.removeDuplicates();
LL.showAllElements();

3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

Answer:
function LinkedList() {
  head = null;
  length = 0;

  let Node = function(element) {
    this.element = element;
    this.next = null
  };

  this.add = function(element) {
    let node = new Node(element);
    if(head === null) {
      head = node;
    } else {
      let current = head;
      while(current.next) {
        current = current.next;
      }
      current.next = node;
      length++;
    }
  };

  this.reverse = function() {
    let current = head;
    let next = null;
    let previous = null;

    while(current) {
      next = current.next;
      current.next = previous;
      previous = current;
      current = next;
    }
    head = previous;
  };

  this.showAllElements = function() {
    if(head === null) return;
    let current = head;
    let i = 1;
    while(current.next != null) {
      console.log("Position: " + i + " Value: " + current.element);
      current = current.next;
      i++;
    }
    console.log("Position: " + i + " Value: " + current.element);
  };
};

let myLL = new LinkedList();
myLL.add("a");
myLL.add("b");
myLL.add("c");
myLL.add("d");
myLL.showAllElements();
myLL.reverse();
myLL.showAllElements();
  
