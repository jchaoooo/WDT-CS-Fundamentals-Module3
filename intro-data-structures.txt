QUESTIONS

1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
ANSWER:
let peopleInLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
ANSWER:
function addPerson(name) {
  peopleInLine.push(name)
  return peopleInLine
}
addPerson("Mary")

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
ANSWER:
function findPerson(name) {
  let personIndex = peopleInLine.indexOf(name)
  if (personIndex !== -1) {
    return personIndex
  } else {
    return name + " is not in line."
  }
}

findPerson("Josh")

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
ANSWER:
//See above function, if it does not find the item in the array it states "Emily is not in line"
findPerson("Emily")

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
ANSWER:
function cutInLine(personCutting, personAllowingCut) {
  let personAllowingCutIndex = findPerson(personAllowingCut);
  peopleInLine.splice(personAllowingCutIndex, 0, personCutting)
  return peopleInLine
}
cutInLine("Melissa", "Ava")


f) If Patrick wants to leave the line, how would you delete him from the array?

function leaveLine(name) {
  let personLeavingIndex = findPerson(name)
  peopleInLine.splice(personLeavingIndex, 1)
  return peopleInLine
}

leaveLine("Patrick")

2. Provide another real-world example that you can model using a data structure.
ANSWER:  Another real world example that can be modeled using data structure is items in your shopping cart.

3. How would your data structure allow developers to access and manipulate the data?
ANSWER: Items in the shopping cart could be elements in a shopping cart object. The object could have properties like quantity, item name, price.  This structure can allow developers access to manipulate the data in different ways.  For instance, sorting by price.  If we keep the values of properties as array we can easily remove items taken out of the cart, add items and keep track of how many things are in our cart.
