1. In your own words, explain what clean code is and why it is important.

Answer: Clean code is code that is easy to understand and easy to change.  Not only should it be understandable by the original author, but also others.  This way he or she can easily fix bugs or make changes without breaking any existing functions.  The importance of writing clean code is to help with efficiency.  Code isn't always just written once and forgotten.  Most of the time people continue working on the same code and having a clean legible code helps with quickly making changes instead of taking hours trying to decipher what the original author was trying to achieve.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.



3. Would you consider the following to be clean code? Explain why or why not.
If not, refactor the code.

Answer: No the following code is not clean code for multiple reasons.  The function name doesn't describe what the function is trying to achieve.  In addition, x, y and z are just arbitrary letters and have no meaning to it.  There are also too many comments, the code should explain what we're trying to achieve.

FUNCTION convertTemperature(degrees, scale)
 IF scale = "F" THEN
 SET temperature to (degreesâˆ’32) * (5/9)
 PRINT temperature + "Celsius"
 ELSE IF scale = "C" THEN
 SET temperature to degrees * 1.8000 + 32.00
 PRINT temperature + "Fahrenheit"
 END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not.
If not, refactor the code.

Answer:  Seems like a pretty clean code.  I can understand what the function is trying to achieve and the variables make sense.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

5. Using pseudocode, refactor the code for the following examples using the
principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and
receives payment accordingly.

FUNCTION calculateTotal(subTotal, discountRate, paymentType)
   SET total to subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + total

FUNCTION choosePayment(paymentType)
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

b. The following function checks out a book if there are no issues with the guest's
account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

c. The following class is a code snippet that should support the transactions
a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 END CLASS

CLASS BankServices

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 END CLASS

 ....
 ....
 ....

END

Programming Questions

You may do the following problems in any language of your choice. Use the clean
code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers
is a perfect square. If it is a perfect square, return the square root, otherwise
return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

Answer:
function perfectSquare(numbers) {
  let totalSum = 0;
  for(let i = 0; i < numbers.length; i++) {
    totalSum += numbers[i]
  };
  if (totalSum > 0 && Math.sqrt(totalSum) % 1 === 0) {
    return Math.sqrt(totalSum);
  } else {
    return totalSum;
  }
}

7. Duplicate Given an array of integers, find out whether the array contains
any duplicate elements. The function should return true if any value appears at
least twice in the array, and false if every element is distinct.

Answer:

function checkDuplicates(integers) {
  for (let i = 0; i < integers.length; i++) {
    for (let j = 0, j < integers.length; j++) {
      if (integers[i] === intergers[j]) {
        return true;
      } else {
        return false;
      }
    }
  }
}

Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters
of another word. For example, spar can be formed from rasp. Given two strings,
stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume
that the strings contain only lowercase letters and do not worry about
case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

function isAnagram(stringOne, stringTwo) {
  let stringArray = [];
    stringArray.push(str.split(stringOne))
}
