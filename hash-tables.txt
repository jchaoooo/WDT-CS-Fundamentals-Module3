QUESTIONS

1. What is a hash table?
Answer: A type of data structure that stores each value by linking it a key, forming key-value pairs. It is similar to Javascript objects.

2. What is hashing?
Answer: Hashing is when a string converts to a numerical index

3. How does a hash table store data?
Answer: A hashing function converts the key to a hash code.  The hash code then get stored in a hash table.  It then distributes entities (key/value pairs) uniformly across an array.  Each element is assigned a key.  By using that key the hash function computes an index that suggest where an entry can be found or inserted

4. How are hash tables and objects different?
Answer: Hash tables and objects are similar.  The difference is that objects should be used in data structure when the data is a static number of distinct values of different types.  Hash tables on the other hand is used when data contains a variable number of consistently formatted values, each with an identifier.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
      -A list of pets and their unique names. Answer: Hash Table
      -The name, age, and the birthday of your best friend. Answer: Object
      -The name and location of every company in a given city. Answer: Hash Table
      -All of the books checked out from a library by a particular individual. Answer: Hash Table
      -The primary and secondary phone numbers for a contact. Answer: Object

6.Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.
Answer:
function hash(key, size) {
  let hash = 0;
  for (let i = 0; i < key.length; i++) {
    hash += key.charCodeAt(i);
  }
  return hash % size;
}

function hashTable() {
  let storage = [];
  const storageLimit = 500;

  this.add = function(phoneNumber, name, address) {
    let index = hash(phoneNumber, storageLimit);
    if(storage[index] === undefined) {
      storage[index] = [
        [phoneNumber, name, address]
      ];
    } else {
      let inserted = false;
      for (let i = 0; i < storage[index].length; i++) {
       if (storage[index][i][0] === phoneNumber) {
           storage[index][i][1] = name;
           storage[index[i][2]] = address;
           inserted = true;
         }
       }
       if (inserted === false) {
         storage[index].push([phoneNumber, name, address])
       }
    }
  };

 this.lookup =  function(phoneNumber) {
   let index = hash(phoneNumber, storageLimit);
   if(storage[index] === undefined) {
     return "Customer has not been created";
   } else {
     for (let i = 0; i < storage[index].length; i++) {
       if (storage[index][i][0] === phoneNumber) {
         return storage[index][i][0] + ", " + storage[index][i][1] + ", " + storage[index][i][2];
       } else {
         return "Customer does not exist"
       }
     }
   }
 };
}


let customers = new hashTable();
customers.add("111-111-1111", "John", "98 Square St");
customers.add("222-222-2222", "Sam", "765 Triagle Drive");
customers.add("333-333-3333", "Jim", "432 Trapezoid Blvd");
customers.add("444-444-4444", "Tod", "10 Circle Ct");

console.log(customers.lookup("333-333-3333"));
console.log(customers.lookup("444-444-4444"));
console.log(customers.lookup("555-055-5555"));


7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.
Answer:
function hash(key, size) {
  let hash = 0;
  for (let i = 0; i < key.length; i++) {
    hash += key.charCodeAt(i);
  }
  return hash % size;
}

function hashTable() {
  let storage = [];
  const storageLimit = 500;

  this.add = function(itemId, itemName, quantity) {
    let index = hash(itemId, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [[itemId, itemName, quantity]];
    } else {
      let inserted = false;
      for (let i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === itemId) {
          storage[index][i][1] = itemName;
          storage[index][i][2] = quantity;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([itemId, itemName, quantity]);
      }
    }
  };

  this.lookup = function(itemId) {
    let index = hash(itemId, storageLimit);
    if (storage[index] === undefined) {
      return "Inventory list is empty"
    } else {
      for (i = 0 ; i < storage[index].length; i++) {
        if(storage[index][i][0] === itemId) {
          return "Item#: " + storage[index][i][0] + ", " + storage[index][i][1] + ", Qty:" + storage[index][i][2];
        } else {
          return "Item not found"
        }
      }
    }
  }
};

let inventory = new hashTable();
inventory.add("123", "Table", "20");
inventory.add("456", "Couch", "10");
inventory.add("789", "Ottoman", "5");

console.log(inventory.lookup("999"));
console.log(inventory.lookup("123"));
console.log(inventory.lookup("456"));



8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.
Answer:
function hash(key, size) {
  let hash = 0;
  for (let i = 0; i < key.length; i++) {
    hash += key.charCodeAt(i);
  }
  return hash % size;
}

function hashTableByPublisher() {
  let storage = [];
  const storageLimit = 500;

  this.add = function(publisher, publicationDate) {
    let index = hash(publisher, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [[publisher, publicationDate]];
    }
  };

  this.lookupByPublisher = function(publisher) {
    let index = hash(publisher, storageLimit);
    if (storage[index] === undefined) {
      return "Publication Date not entered"
    } else {
      for (i = 0 ; i < storage[index].length; i++) {
        if(storage[index][i][0] === publisher) {
          return "Publisher: " + storage[index][i][0] + ", Publication Date: " + storage[index][i][1];
        } else {
          return "Publisher not found"
        }
      }
    }
  };
};

function hashTableByDate() {
  let storage = [];
  const storageLimit = 500;

  this.add = function(publisher, publicationDate) {
    let index = hash(publicationDate, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [[publisher, publicationDate]];
    }
  };

  this.lookupByDate = function(publicationDate) {
    let index = hash(publicationDate, storageLimit);
    if (storage[index] === undefined) {
      return "Publisher not entered"
    } else {
      for (i = 0 ; i < storage[index].length; i++) {
        if(storage[index][i][1] === publicationDate) {
          return "Publisher: " + storage[index][i][0] + ", Publication Date: " + storage[index][i][1];
        } else {
          return "Date not found"
        }
      }
    }
  };
};

let newspaper = new hashTableByPublisher();
let newspaperDates = new hashTableByDate();

newspaper.add("USA Today", "2001");
newspaper.add("New York Daily News", "2000");
newspaper.add("NY Times", "2010");

newspaperDates.add("USA Today", "2001");
newspaperDates.add("New York Daily News", "2005");
newspaperDates.add("NY Times", "2010");

console.log(newspaper.lookupByPublisher("USA Today"));
console.log(newspaper.lookupByPublisher("New York Daily News"));
console.log(newspaperDates.lookupByDate("2001"));
